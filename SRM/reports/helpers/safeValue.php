<?php

/**
 * Smart Report Maker
 * Author : StarSoft 
 * All copyrights are preserved to StarSoft
 * http://mysqlreports.com/
 *
 */
//if (! defined('DIRECTACESS')) exit('No direct script access allowed');
$log = "";

// this function to make call back in filter_input_array() function
function clean_input($str, $log = true) {

    if ($log)
        logging("  input data: $str -> ");
    $str = strip_tags($str);
    // $str = htmlspecialchars($str, ENT_QUOTES);
    // $str = HTML_
    $str = (get_magic_quotes_gpc()) ? stripslashes($str) : $str;
    $str = trim($str);
    $str = preg_replace('/[\\"\'[{;&}|<>\/]/i', '', $str);
    $str = str_replace("=", "", $str);
    if ($log)
        logging("Cleaned data: $str \n");
    return $str;
}

// this function to return array with cleared values from $_POST array and it take $_POST as parameter
function clean_global_array($arr) {


    $clean_arr = array();
    foreach ($arr as $key => $value) {
        $clean_arr[] = filter_input_array(
                INPUT_POST, array(
            "$key" => array(
                'filter' => FILTER_CALLBACK,
                'options' => 'clean_input'
            )
                )
        );
    }

    foreach ($clean_arr as $key => $value) {
        foreach ($value as $k => $val)
            $clean_arr[$k] = $val;
    }
    return $clean_arr;
}

function clean_input_array($arr) {
    //  echo "<br/>";
    //  print_r($arr);
    $clean = array();
    foreach ($arr as $k => $v) {
        if (is_array($v))
            $clean[clean_input($k, false)] = clean_input_array($v);
        else
            $clean[clean_input($k, false)] = clean_input($v, false);
    }
    //  echo "<br/> cleaned array <br/>";
    // print_r($clean);

    return $clean;
}

function is_clean($str, $no_space = false, $only_alphanumeric = true) {
    //No attacks and No special characters and No spaces
    logging(" Check variable : $str, check include spaces : $no_space , check only alphanumeric : $only_alphanumeric \n");
    $str = strtolower($str);
    // dangrous special characters


    if (empty($str)) {
        Logging("Data is empty \n");
        return true;
    }

    $specials = array('\\', "\n", "\r", "'", '"', "\x1a", "<", ">", "=");
    foreach ($specials as $val) {
        if (strstr($str, $val)) {
            logging("Result Invalid reason : string $str includs harmful special chracters \n");
            return false;
        }
    }


    /* if(is_numeric($str)&& strstr($str, " ")==false)
      { //handling zero issue
      Logging("Data is numeric");
      return true;
      } */

    //No speacial chracters except the members existed in the $allowed array
    if ($only_alphanumeric == true) {
        $edited_str = $str;
        $allowed = array("-", "_", "@", ".", ",", "#", " ", "-", "/", "|c", ":", "?");
        foreach ($allowed as $v) {
            $edited_str = str_replace($v, "", $edited_str);
        }

        if (ctype_alnum($edited_str) != true) {
            logging("Result Invalid reason :  string $str includes special characters \n");
            return false;
        }
    }

    // No spaces
    if (strstr($str, " ") && $no_space == true) {
        logging("Result Invalid reason : string $str contains spaces \n");
        return false;
    }
    logging("string $str valid  \n");
    return true;
}

function is_exist($var) {
    //  if($var=="0" || $var==0) return true;

    if (isset($var)) {
        if (is_numeric($var)) {// zero issue
            return true;
        } else if (!empty($var)) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function decode($encoded) {
    return base64_decode($encoded);
}

function array_row_count($arr) {
    if (function_exists(array_column)) {
        return array_column($arr);
    } else {
        return count($arr[0]);
    }
}

function is_date($str) {
    $stamp = strtotime($str);
    if (!is_numeric($stamp))
        return FALSE;
    $month = date('m', $stamp);
    $day = date('d', $stamp);
    $year = date('Y', $stamp);
    if (checkdate($month, $day, $year))
        return TRUE;
    return FALSE;
}

function logging($str, $type = "") {
    global $log;
    $log .= $str;
}

function send_log_info($maintainance_email) {
    global $log;
    if (filter_var($maintainance_email, FILTER_VALIDATE_EMAIL) && is_exist($_GET["debug_mode_6"]) && $_GET["debug_mode_6"] == "1701") {

        $message .= "Hello, \n \n";
        $message .= "This message is sent automatically from your own server (based on your request) for troubleshooting a problem in a report generated by a full version of smart report maker installed on your own server. \n \n";
        $message .= "The following is a log of all processes done for generating the report, please send this log via our support system to help our team   understanding the problem(s) correctly .\n \n";
        $message .= " \n ****** The start  of the log  *****\n \n $log \n *** The End of the log ****  \n \n";
        $message .= "\n \n \n Please not that : \n \n In order to stop receiving the same message again please open the config file of the generated report and remove this email address  from the maintainance_email by making it like the following : \n ";
        $message .= 'maintainance_email = ""; ';


        @mail($maintainance_email, "Smart Report Maker Troubleshooting", $message);

        // Uncomment if  Email in not sent correctly :        

        /* if (file_exists("mail.txt"))
          unlink("mail.txt");
          $fp = fopen("mail.txt", "a+");
          fwrite($fp, $message . " \n");
          fclose($fp); */
    }
}

function log_array($arr) {
    if (!empty($arr)) {
        foreach ($arr as $key => $val) {
            if (!is_array($val)) {
                logging("\n   $key   : $val");
            } else {
                logging("\n   $key is an array: \n ");
                log_array($val);
            }
        }
        logging("\n");
    }
}

function check_numeric_parameter($var) {
    if (is_numeric($var) && is_clean($var, true, true) && $var > -1) {
        logging("\n  URL parameter: $var is  accepted  \n");
        return true;
    } else {
        logging("\n URL parameter: $var is NOT accepted  \n");
        return false;
    }
}

function remove_unexpected_superglobals($superGlobal, $allowedKeys) {
    // this function removes any Unexpected keys from super globals 
    foreach ($superGlobal as $key => $val) {
        if (!in_array($key, $allowedKeys)) {
            unset($superGlobal[$key]);
        }
    }
    return $superGlobal;
}

function is_clean_username($str) {
    //No attacks and No special characters and No spaces
    logging(" Check username : $str \n");
    $str = strtolower($str);
    // dangrous special characters


    if (empty($str)) {
        Logging("username is empty \n");
        return false;
    }

    $specials = array('\\', "\n", "\r", "'", '"', "\x1a", "<", ">", "=");
    foreach ($specials as $val) {
        if (strstr($str, $val)) {
            logging("Result Invalid reason : string $str includs harmful special chracters \n");
            return false;
        }
    }

    $edited_str = $str;
    $allowed = array("-", "_", "@", ".");
    foreach ($allowed as $v) {
        $edited_str = str_replace($v, "", $edited_str);
    }

    if (ctype_alnum($edited_str) != true) {
        logging("Result Invalid reason :  UserName $str includes special characters \n");
        return false;
    }


    // No spaces
    if (strstr($str, " ")) {
        logging("Result Invalid reason : UserName $str contains spaces \n");
        return false;
    }
    logging("string $str valid  \n");
    return true;
}
